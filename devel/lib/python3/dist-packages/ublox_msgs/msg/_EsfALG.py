# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/EsfALG.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EsfALG(genpy.Message):
  _md5sum = "9a16c82ca78b0658bd506bfde3a1b262"
  _type = "ublox_msgs/EsfALG"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ESF-ALG (0x10 0x14)
# IMU alignment information
#
# This message outputs the IMU alignment angles which define the rotation from the installation-frame to the
# IMU-frame. In addition, it indicates the automatic IMU-mount alignment status.
#

uint8 CLASS_ID = 16
uint8 MESSAGE_ID = 20

uint8 FLAGS_AUTO_MNT_ALG_ON = 0
uint32 FLAGS_STATUS = 14

uint8 FLAGS_STATUS_USER_FIXED_ANGLES_USED = 0
uint8 FLAGS_STATUS_ROLL_PITCH_ANGLES_ALIGNEMENT_ONGOING = 1
uint8 FLAGS_STATUS_ROLL_PITCH_YAW_ANGLES_ALIGNEMENT_ONGOING = 2
uint8 FLAGS_STATUS_COARSE_ALIGNMENT_USED = 3
uint8 FLAGS_STATUS_FINE_ALIGNEMENT_USED = 4

uint8 ERROR_TILT_ARG_ERROR = 1
uint8 ERROR_YAW_ARG_ERROR = 2
uint8 ERROR_ANGLE_ERROR = 3

uint32 iTOW
uint8 version
uint8 flags
uint8 errors
uint8 reserved0
uint32 yaw # IMU-mount yaw angle [0, 360]
int16 pitch # IMU-mount pitch angle [-90, 90]
int16 roll # IMU-mount roll angle [-180, 180]
"""
  # Pseudo-constants
  CLASS_ID = 16
  MESSAGE_ID = 20
  FLAGS_AUTO_MNT_ALG_ON = 0
  FLAGS_STATUS = 14
  FLAGS_STATUS_USER_FIXED_ANGLES_USED = 0
  FLAGS_STATUS_ROLL_PITCH_ANGLES_ALIGNEMENT_ONGOING = 1
  FLAGS_STATUS_ROLL_PITCH_YAW_ANGLES_ALIGNEMENT_ONGOING = 2
  FLAGS_STATUS_COARSE_ALIGNMENT_USED = 3
  FLAGS_STATUS_FINE_ALIGNEMENT_USED = 4
  ERROR_TILT_ARG_ERROR = 1
  ERROR_YAW_ARG_ERROR = 2
  ERROR_ANGLE_ERROR = 3

  __slots__ = ['iTOW','version','flags','errors','reserved0','yaw','pitch','roll']
  _slot_types = ['uint32','uint8','uint8','uint8','uint8','uint32','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       iTOW,version,flags,errors,reserved0,yaw,pitch,roll

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EsfALG, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.iTOW is None:
        self.iTOW = 0
      if self.version is None:
        self.version = 0
      if self.flags is None:
        self.flags = 0
      if self.errors is None:
        self.errors = 0
      if self.reserved0 is None:
        self.reserved0 = 0
      if self.yaw is None:
        self.yaw = 0
      if self.pitch is None:
        self.pitch = 0
      if self.roll is None:
        self.roll = 0
    else:
      self.iTOW = 0
      self.version = 0
      self.flags = 0
      self.errors = 0
      self.reserved0 = 0
      self.yaw = 0
      self.pitch = 0
      self.roll = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I4BI2h().pack(_x.iTOW, _x.version, _x.flags, _x.errors, _x.reserved0, _x.yaw, _x.pitch, _x.roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.iTOW, _x.version, _x.flags, _x.errors, _x.reserved0, _x.yaw, _x.pitch, _x.roll,) = _get_struct_I4BI2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I4BI2h().pack(_x.iTOW, _x.version, _x.flags, _x.errors, _x.reserved0, _x.yaw, _x.pitch, _x.roll))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.iTOW, _x.version, _x.flags, _x.errors, _x.reserved0, _x.yaw, _x.pitch, _x.roll,) = _get_struct_I4BI2h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I4BI2h = None
def _get_struct_I4BI2h():
    global _struct_I4BI2h
    if _struct_I4BI2h is None:
        _struct_I4BI2h = struct.Struct("<I4BI2h")
    return _struct_I4BI2h
