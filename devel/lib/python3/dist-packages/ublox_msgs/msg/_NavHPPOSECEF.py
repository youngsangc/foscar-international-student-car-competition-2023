# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ublox_msgs/NavHPPOSECEF.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NavHPPOSECEF(genpy.Message):
  _md5sum = "41fbf0937e53f84ca89afe3287f85e50"
  _type = "ublox_msgs/NavHPPOSECEF"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# NAV-HPPOSECEF (0x01 0x13)
# High Precision Position Solution in ECEF
#
# See important comments concerning validity of position given in section
# Navigation Output Filters.
#

uint8 CLASS_ID = 1
uint8 MESSAGE_ID = 19

uint8 version
uint8[3] reserved0

uint32 iTOW             # GPS Millisecond Time of Week [ms]

int32 ecefX             # ECEF X coordinate [cm]
int32 ecefY             # ECEF Y coordinate [cm]
int32 ecefZ             # ECEF Z coordinate [cm]

int8 ecefXHp            # ECEF X high precision component [0.1mm]
int8 ecefYHp            # ECEF Y high precision component [0.1mm]
int8 ecefZHp            # ECEF Z high precision component [0.1mm]
uint8 flags

uint32 pAcc             # Position Accuracy Estimate [0.1mm]
"""
  # Pseudo-constants
  CLASS_ID = 1
  MESSAGE_ID = 19

  __slots__ = ['version','reserved0','iTOW','ecefX','ecefY','ecefZ','ecefXHp','ecefYHp','ecefZHp','flags','pAcc']
  _slot_types = ['uint8','uint8[3]','uint32','int32','int32','int32','int8','int8','int8','uint8','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       version,reserved0,iTOW,ecefX,ecefY,ecefZ,ecefXHp,ecefYHp,ecefZHp,flags,pAcc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NavHPPOSECEF, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.version is None:
        self.version = 0
      if self.reserved0 is None:
        self.reserved0 = b'\0'*3
      if self.iTOW is None:
        self.iTOW = 0
      if self.ecefX is None:
        self.ecefX = 0
      if self.ecefY is None:
        self.ecefY = 0
      if self.ecefZ is None:
        self.ecefZ = 0
      if self.ecefXHp is None:
        self.ecefXHp = 0
      if self.ecefYHp is None:
        self.ecefYHp = 0
      if self.ecefZHp is None:
        self.ecefZHp = 0
      if self.flags is None:
        self.flags = 0
      if self.pAcc is None:
        self.pAcc = 0
    else:
      self.version = 0
      self.reserved0 = b'\0'*3
      self.iTOW = 0
      self.ecefX = 0
      self.ecefY = 0
      self.ecefZ = 0
      self.ecefXHp = 0
      self.ecefYHp = 0
      self.ecefZHp = 0
      self.flags = 0
      self.pAcc = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.version
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
      _x = self
      buff.write(_get_struct_I3i3bBI().pack(_x.iTOW, _x.ecefX, _x.ecefY, _x.ecefZ, _x.ecefXHp, _x.ecefYHp, _x.ecefZHp, _x.flags, _x.pAcc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.version,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved0 = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.iTOW, _x.ecefX, _x.ecefY, _x.ecefZ, _x.ecefXHp, _x.ecefYHp, _x.ecefZHp, _x.flags, _x.pAcc,) = _get_struct_I3i3bBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.version
      buff.write(_get_struct_B().pack(_x))
      _x = self.reserved0
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_3B().pack(*_x))
      else:
        buff.write(_get_struct_3s().pack(_x))
      _x = self
      buff.write(_get_struct_I3i3bBI().pack(_x.iTOW, _x.ecefX, _x.ecefY, _x.ecefZ, _x.ecefXHp, _x.ecefYHp, _x.ecefZHp, _x.flags, _x.pAcc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.version,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 3
      self.reserved0 = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.iTOW, _x.ecefX, _x.ecefY, _x.ecefZ, _x.ecefXHp, _x.ecefYHp, _x.ecefZHp, _x.flags, _x.pAcc,) = _get_struct_I3i3bBI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3s = None
def _get_struct_3s():
    global _struct_3s
    if _struct_3s is None:
        _struct_3s = struct.Struct("<3s")
    return _struct_3s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I3i3bBI = None
def _get_struct_I3i3bBI():
    global _struct_I3i3bBI
    if _struct_I3i3bBI is None:
        _struct_I3i3bBI = struct.Struct("<I3i3bBI")
    return _struct_I3i3bBI
