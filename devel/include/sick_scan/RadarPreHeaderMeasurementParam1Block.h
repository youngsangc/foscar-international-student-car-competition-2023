// Generated by gencpp from file sick_scan/RadarPreHeaderMeasurementParam1Block.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_RADARPREHEADERMEASUREMENTPARAM1BLOCK_H
#define SICK_SCAN_MESSAGE_RADARPREHEADERMEASUREMENTPARAM1BLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan
{
template <class ContainerAllocator>
struct RadarPreHeaderMeasurementParam1Block_
{
  typedef RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> Type;

  RadarPreHeaderMeasurementParam1Block_()
    : uiCycleDuration(0)
    , uiNoiseLevel(0)  {
    }
  RadarPreHeaderMeasurementParam1Block_(const ContainerAllocator& _alloc)
    : uiCycleDuration(0)
    , uiNoiseLevel(0)  {
  (void)_alloc;
    }



   typedef uint32_t _uiCycleDuration_type;
  _uiCycleDuration_type uiCycleDuration;

   typedef uint32_t _uiNoiseLevel_type;
  _uiNoiseLevel_type uiNoiseLevel;





  typedef boost::shared_ptr< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPreHeaderMeasurementParam1Block_

typedef ::sick_scan::RadarPreHeaderMeasurementParam1Block_<std::allocator<void> > RadarPreHeaderMeasurementParam1Block;

typedef boost::shared_ptr< ::sick_scan::RadarPreHeaderMeasurementParam1Block > RadarPreHeaderMeasurementParam1BlockPtr;
typedef boost::shared_ptr< ::sick_scan::RadarPreHeaderMeasurementParam1Block const> RadarPreHeaderMeasurementParam1BlockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator1> & lhs, const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator2> & rhs)
{
  return lhs.uiCycleDuration == rhs.uiCycleDuration &&
    lhs.uiNoiseLevel == rhs.uiNoiseLevel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator1> & lhs, const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34fa13bb693fa69fead0a46da987eb62";
  }

  static const char* value(const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34fa13bb693fa69fULL;
  static const uint64_t static_value2 = 0xead0a46da987eb62ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/RadarPreHeaderMeasurementParam1Block";
  }

  static const char* value(const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 uiCycleDuration # Time in microseconds to detect this items\n"
"uint32 uiNoiseLevel # [1/100dB]\n"
;
  }

  static const char* value(const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uiCycleDuration);
      stream.next(m.uiNoiseLevel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPreHeaderMeasurementParam1Block_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator>& v)
  {
    s << indent << "uiCycleDuration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uiCycleDuration);
    s << indent << "uiNoiseLevel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uiNoiseLevel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_SCAN_MESSAGE_RADARPREHEADERMEASUREMENTPARAM1BLOCK_H
