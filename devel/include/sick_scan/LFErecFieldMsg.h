// Generated by gencpp from file sick_scan/LFErecFieldMsg.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_LFERECFIELDMSG_H
#define SICK_SCAN_MESSAGE_LFERECFIELDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan
{
template <class ContainerAllocator>
struct LFErecFieldMsg_
{
  typedef LFErecFieldMsg_<ContainerAllocator> Type;

  LFErecFieldMsg_()
    : version_number(0)
    , field_index(0)
    , sys_count(0)
    , dist_scale_factor(0.0)
    , dist_scale_offset(0.0)
    , angle_scale_factor(0)
    , angle_scale_offset(0)
    , field_result_mrs(0)
    , time_state(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minute(0)
    , second(0)
    , microsecond(0)  {
    }
  LFErecFieldMsg_(const ContainerAllocator& _alloc)
    : version_number(0)
    , field_index(0)
    , sys_count(0)
    , dist_scale_factor(0.0)
    , dist_scale_offset(0.0)
    , angle_scale_factor(0)
    , angle_scale_offset(0)
    , field_result_mrs(0)
    , time_state(0)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , minute(0)
    , second(0)
    , microsecond(0)  {
  (void)_alloc;
    }



   typedef uint16_t _version_number_type;
  _version_number_type version_number;

   typedef uint8_t _field_index_type;
  _field_index_type field_index;

   typedef uint32_t _sys_count_type;
  _sys_count_type sys_count;

   typedef float _dist_scale_factor_type;
  _dist_scale_factor_type dist_scale_factor;

   typedef float _dist_scale_offset_type;
  _dist_scale_offset_type dist_scale_offset;

   typedef uint32_t _angle_scale_factor_type;
  _angle_scale_factor_type angle_scale_factor;

   typedef int32_t _angle_scale_offset_type;
  _angle_scale_offset_type angle_scale_offset;

   typedef uint8_t _field_result_mrs_type;
  _field_result_mrs_type field_result_mrs;

   typedef uint16_t _time_state_type;
  _time_state_type time_state;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _minute_type;
  _minute_type minute;

   typedef uint8_t _second_type;
  _second_type second;

   typedef uint32_t _microsecond_type;
  _microsecond_type microsecond;





  typedef boost::shared_ptr< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> const> ConstPtr;

}; // struct LFErecFieldMsg_

typedef ::sick_scan::LFErecFieldMsg_<std::allocator<void> > LFErecFieldMsg;

typedef boost::shared_ptr< ::sick_scan::LFErecFieldMsg > LFErecFieldMsgPtr;
typedef boost::shared_ptr< ::sick_scan::LFErecFieldMsg const> LFErecFieldMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan::LFErecFieldMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan::LFErecFieldMsg_<ContainerAllocator1> & lhs, const ::sick_scan::LFErecFieldMsg_<ContainerAllocator2> & rhs)
{
  return lhs.version_number == rhs.version_number &&
    lhs.field_index == rhs.field_index &&
    lhs.sys_count == rhs.sys_count &&
    lhs.dist_scale_factor == rhs.dist_scale_factor &&
    lhs.dist_scale_offset == rhs.dist_scale_offset &&
    lhs.angle_scale_factor == rhs.angle_scale_factor &&
    lhs.angle_scale_offset == rhs.angle_scale_offset &&
    lhs.field_result_mrs == rhs.field_result_mrs &&
    lhs.time_state == rhs.time_state &&
    lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.minute == rhs.minute &&
    lhs.second == rhs.second &&
    lhs.microsecond == rhs.microsecond;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan::LFErecFieldMsg_<ContainerAllocator1> & lhs, const ::sick_scan::LFErecFieldMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "268600f47eb96b8f384e54c8bc6e18f6";
  }

  static const char* value(const ::sick_scan::LFErecFieldMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x268600f47eb96b8fULL;
  static const uint64_t static_value2 = 0x384e54c8bc6e18f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/LFErecFieldMsg";
  }

  static const char* value(const ::sick_scan::LFErecFieldMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains a single field of a \"sSN LFErec\" message of a Sick laser scanner as an ros message.\n"
"# See https://github.com/SICKAG/libsick_ldmrs/blob/master/src/sopas/LdmrsSopasLayer.cpp lines 1414 ff.\n"
"# Field result field_result_mrs is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)\n"
"# Note: field indices are sorted in reverse order, i.e. with 2 configured fields, we typically have\n"
"# output_msg.fields[0].field_index = 1, output_msg.fields[0].field_result_mrs = 0 (invalid)\n"
"# output_msg.fields[1].field_index = 2, output_msg.fields[1].field_result_mrs = 1 or 2 (clear=1 or infringed=2)\n"
"# output_msg.fields[2].field_index = 3, output_msg.fields[2].field_result_mrs = 1 or 2 (clear=1 or infringed=2)\n"
"\n"
"uint16 version_number\n"
"uint8 field_index\n"
"uint32 sys_count\n"
"float32 dist_scale_factor\n"
"float32 dist_scale_offset\n"
"uint32 angle_scale_factor\n"
"int32 angle_scale_offset\n"
"uint8 field_result_mrs # field result is 0 (invalid/incorrect), 1 (free/clear) or 2 (infringed)\n"
"# Time block\n"
"uint16 time_state  # No time data: 0, Time data: 1\n"
"uint16 year        # f.e. 2021\n"
"uint8 month        # 1 ... 12\n"
"uint8 day          # 1 ... 31\n"
"uint8 hour         # 0 ... 23\n"
"uint8 minute       # 0 ... 59\n"
"uint8 second       # 0 ... 59\n"
"uint32 microsecond # 0 ... 999999\n"
;
  }

  static const char* value(const ::sick_scan::LFErecFieldMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version_number);
      stream.next(m.field_index);
      stream.next(m.sys_count);
      stream.next(m.dist_scale_factor);
      stream.next(m.dist_scale_offset);
      stream.next(m.angle_scale_factor);
      stream.next(m.angle_scale_offset);
      stream.next(m.field_result_mrs);
      stream.next(m.time_state);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.minute);
      stream.next(m.second);
      stream.next(m.microsecond);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LFErecFieldMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan::LFErecFieldMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan::LFErecFieldMsg_<ContainerAllocator>& v)
  {
    s << indent << "version_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.version_number);
    s << indent << "field_index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.field_index);
    s << indent << "sys_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sys_count);
    s << indent << "dist_scale_factor: ";
    Printer<float>::stream(s, indent + "  ", v.dist_scale_factor);
    s << indent << "dist_scale_offset: ";
    Printer<float>::stream(s, indent + "  ", v.dist_scale_offset);
    s << indent << "angle_scale_factor: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.angle_scale_factor);
    s << indent << "angle_scale_offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_scale_offset);
    s << indent << "field_result_mrs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.field_result_mrs);
    s << indent << "time_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_state);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "minute: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.minute);
    s << indent << "second: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.second);
    s << indent << "microsecond: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.microsecond);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_SCAN_MESSAGE_LFERECFIELDMSG_H
