// Generated by gencpp from file sick_scan/RadarPreHeader.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_RADARPREHEADER_H
#define SICK_SCAN_MESSAGE_RADARPREHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sick_scan/RadarPreHeaderDeviceBlock.h>
#include <sick_scan/RadarPreHeaderStatusBlock.h>
#include <sick_scan/RadarPreHeaderMeasurementParam1Block.h>
#include <sick_scan/RadarPreHeaderEncoderBlock.h>

namespace sick_scan
{
template <class ContainerAllocator>
struct RadarPreHeader_
{
  typedef RadarPreHeader_<ContainerAllocator> Type;

  RadarPreHeader_()
    : uiVersionNo(0)
    , radarPreHeaderDeviceBlock()
    , radarPreHeaderStatusBlock()
    , radarPreHeaderMeasurementParam1Block()
    , radarPreHeaderArrayEncoderBlock()  {
    }
  RadarPreHeader_(const ContainerAllocator& _alloc)
    : uiVersionNo(0)
    , radarPreHeaderDeviceBlock(_alloc)
    , radarPreHeaderStatusBlock(_alloc)
    , radarPreHeaderMeasurementParam1Block(_alloc)
    , radarPreHeaderArrayEncoderBlock(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _uiVersionNo_type;
  _uiVersionNo_type uiVersionNo;

   typedef  ::sick_scan::RadarPreHeaderDeviceBlock_<ContainerAllocator>  _radarPreHeaderDeviceBlock_type;
  _radarPreHeaderDeviceBlock_type radarPreHeaderDeviceBlock;

   typedef  ::sick_scan::RadarPreHeaderStatusBlock_<ContainerAllocator>  _radarPreHeaderStatusBlock_type;
  _radarPreHeaderStatusBlock_type radarPreHeaderStatusBlock;

   typedef  ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator>  _radarPreHeaderMeasurementParam1Block_type;
  _radarPreHeaderMeasurementParam1Block_type radarPreHeaderMeasurementParam1Block;

   typedef std::vector< ::sick_scan::RadarPreHeaderEncoderBlock_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sick_scan::RadarPreHeaderEncoderBlock_<ContainerAllocator> >::other >  _radarPreHeaderArrayEncoderBlock_type;
  _radarPreHeaderArrayEncoderBlock_type radarPreHeaderArrayEncoderBlock;





  typedef boost::shared_ptr< ::sick_scan::RadarPreHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sick_scan::RadarPreHeader_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPreHeader_

typedef ::sick_scan::RadarPreHeader_<std::allocator<void> > RadarPreHeader;

typedef boost::shared_ptr< ::sick_scan::RadarPreHeader > RadarPreHeaderPtr;
typedef boost::shared_ptr< ::sick_scan::RadarPreHeader const> RadarPreHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan::RadarPreHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan::RadarPreHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan::RadarPreHeader_<ContainerAllocator1> & lhs, const ::sick_scan::RadarPreHeader_<ContainerAllocator2> & rhs)
{
  return lhs.uiVersionNo == rhs.uiVersionNo &&
    lhs.radarPreHeaderDeviceBlock == rhs.radarPreHeaderDeviceBlock &&
    lhs.radarPreHeaderStatusBlock == rhs.radarPreHeaderStatusBlock &&
    lhs.radarPreHeaderMeasurementParam1Block == rhs.radarPreHeaderMeasurementParam1Block &&
    lhs.radarPreHeaderArrayEncoderBlock == rhs.radarPreHeaderArrayEncoderBlock;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan::RadarPreHeader_<ContainerAllocator1> & lhs, const ::sick_scan::RadarPreHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan::RadarPreHeader_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan::RadarPreHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan::RadarPreHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b96d942f26bd5b00da7e631bf199685";
  }

  static const char* value(const ::sick_scan::RadarPreHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b96d942f26bd5b0ULL;
  static const uint64_t static_value2 = 0x0da7e631bf199685ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/RadarPreHeader";
  }

  static const char* value(const ::sick_scan::RadarPreHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Version information for this whole structure (MeasurementData)\n"
"uint16 uiVersionNo\n"
"sick_scan/RadarPreHeaderDeviceBlock radarPreHeaderDeviceBlock\n"
"sick_scan/RadarPreHeaderStatusBlock radarPreHeaderStatusBlock\n"
"sick_scan/RadarPreHeaderMeasurementParam1Block radarPreHeaderMeasurementParam1Block\n"
"sick_scan/RadarPreHeaderEncoderBlock[] radarPreHeaderArrayEncoderBlock\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sick_scan/RadarPreHeaderDeviceBlock\n"
"#\n"
"#\n"
"#\n"
"#\n"
"\n"
"# Logical number of the device\"\n"
"uint32 uiIdent\n"
"# Serial number of the device\n"
"uint32 udiSerialNo\n"
"# State of the device\n"
"bool bDeviceError\n"
"# Contamination Warning\n"
"bool bContaminationWarning\n"
"# Contamination Error\n"
"bool bContaminationError\n"
"================================================================================\n"
"MSG: sick_scan/RadarPreHeaderStatusBlock\n"
"#\n"
"#\n"
"#\n"
"uint32 uiTelegramCount # telegram number\n"
"uint32 uiCycleCount # \"scan number\"\n"
"uint32 udiSystemCountScan # system time since power on of scan gen. [us]\n"
"uint32 udiSystemCountTransmit # system time since power on of scan transmission [us]\n"
"uint16 uiInputs # state of digital inputs\n"
"uint16 uiOutputs # state of digital outputs\n"
"\n"
"================================================================================\n"
"MSG: sick_scan/RadarPreHeaderMeasurementParam1Block\n"
"uint32 uiCycleDuration # Time in microseconds to detect this items\n"
"uint32 uiNoiseLevel # [1/100dB]\n"
"\n"
"================================================================================\n"
"MSG: sick_scan/RadarPreHeaderEncoderBlock\n"
"# Array with connected encoder sensors\n"
"uint32 udiEncoderPos  # encoder position [inc]\n"
"int16 iEncoderSpeed   # encoder speed [inc/mm]\n"
;
  }

  static const char* value(const ::sick_scan::RadarPreHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uiVersionNo);
      stream.next(m.radarPreHeaderDeviceBlock);
      stream.next(m.radarPreHeaderStatusBlock);
      stream.next(m.radarPreHeaderMeasurementParam1Block);
      stream.next(m.radarPreHeaderArrayEncoderBlock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPreHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan::RadarPreHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan::RadarPreHeader_<ContainerAllocator>& v)
  {
    s << indent << "uiVersionNo: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uiVersionNo);
    s << indent << "radarPreHeaderDeviceBlock: ";
    s << std::endl;
    Printer< ::sick_scan::RadarPreHeaderDeviceBlock_<ContainerAllocator> >::stream(s, indent + "  ", v.radarPreHeaderDeviceBlock);
    s << indent << "radarPreHeaderStatusBlock: ";
    s << std::endl;
    Printer< ::sick_scan::RadarPreHeaderStatusBlock_<ContainerAllocator> >::stream(s, indent + "  ", v.radarPreHeaderStatusBlock);
    s << indent << "radarPreHeaderMeasurementParam1Block: ";
    s << std::endl;
    Printer< ::sick_scan::RadarPreHeaderMeasurementParam1Block_<ContainerAllocator> >::stream(s, indent + "  ", v.radarPreHeaderMeasurementParam1Block);
    s << indent << "radarPreHeaderArrayEncoderBlock[]" << std::endl;
    for (size_t i = 0; i < v.radarPreHeaderArrayEncoderBlock.size(); ++i)
    {
      s << indent << "  radarPreHeaderArrayEncoderBlock[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sick_scan::RadarPreHeaderEncoderBlock_<ContainerAllocator> >::stream(s, indent + "    ", v.radarPreHeaderArrayEncoderBlock[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SICK_SCAN_MESSAGE_RADARPREHEADER_H
