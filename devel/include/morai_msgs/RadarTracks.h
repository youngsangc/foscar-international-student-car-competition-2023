// Generated by gencpp from file morai_msgs/RadarTracks.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_RADARTRACKS_H
#define MORAI_MSGS_MESSAGE_RADARTRACKS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <morai_msgs/RadarTrack.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct RadarTracks_
{
  typedef RadarTracks_<ContainerAllocator> Type;

  RadarTracks_()
    : header()
    , tracks()  {
    }
  RadarTracks_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tracks(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::morai_msgs::RadarTrack_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::morai_msgs::RadarTrack_<ContainerAllocator> >::other >  _tracks_type;
  _tracks_type tracks;





  typedef boost::shared_ptr< ::morai_msgs::RadarTracks_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::RadarTracks_<ContainerAllocator> const> ConstPtr;

}; // struct RadarTracks_

typedef ::morai_msgs::RadarTracks_<std::allocator<void> > RadarTracks;

typedef boost::shared_ptr< ::morai_msgs::RadarTracks > RadarTracksPtr;
typedef boost::shared_ptr< ::morai_msgs::RadarTracks const> RadarTracksConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::RadarTracks_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::RadarTracks_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::RadarTracks_<ContainerAllocator1> & lhs, const ::morai_msgs::RadarTracks_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tracks == rhs.tracks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::RadarTracks_<ContainerAllocator1> & lhs, const ::morai_msgs::RadarTracks_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::RadarTracks_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::RadarTracks_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::RadarTracks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::RadarTracks_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::RadarTracks_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::RadarTracks_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::RadarTracks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7a281654e489a7faa3eacc0f9a4cf33";
  }

  static const char* value(const ::morai_msgs::RadarTracks_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7a281654e489a7fULL;
  static const uint64_t static_value2 = 0xaa3eacc0f9a4cf33ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::RadarTracks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/RadarTracks";
  }

  static const char* value(const ::morai_msgs::RadarTracks_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::RadarTracks_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"RadarTrack[] tracks\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/RadarTrack\n"
"# This message relates only to FMCW radar.  \n"
"# All variables below are relative to the radar's frame of reference.\n"
"# This message is not meant to be used alone but as part of a stamped or array message.\n"
"\n"
"# Object classifications (Additional vendor-specific classifications are permitted starting from 32000 eg. Car)\n"
"\n"
"int8 uuid\n"
"\n"
"                                            # Note: The z component of these fields is ignored for 2D tracking.\n"
"geometry_msgs/Point position                # x, y, z coordinates of the centroid of the object being tracked.\n"
"geometry_msgs/Vector3 velocity              # The velocity of the object in each spatial dimension.\n"
"geometry_msgs/Vector3 acceleration          # The acceleration of the object in each spatial dimension.\n"
"geometry_msgs/Vector3 size                  # The object size as represented by the radar sensor eg. length, width, height OR the diameter of an ellipsoid in the x, y, z, dimensions\n"
"                                            # and is from the sensor frame's view.\n"
"uint16 classification                       # An optional classification of the object (see above)\n"
"\n"
"float32[] position_covariance              # Upper-triangle covariance about the x, y, z axes\n"
"float32[] velocity_covariance              # Upper-triangle covariance about the x, y, z axes\n"
"float32[] acceleration_covariance          # Upper-triangle covariance about the x, y, z axes\n"
"float32[] size_covariance                  # Upper-triangle covariance about the x, y, z axes\n"
"\n"
"float32 amplitude\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::RadarTracks_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::RadarTracks_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tracks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarTracks_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::RadarTracks_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::RadarTracks_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tracks[]" << std::endl;
    for (size_t i = 0; i < v.tracks.size(); ++i)
    {
      s << indent << "  tracks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::morai_msgs::RadarTrack_<ContainerAllocator> >::stream(s, indent + "    ", v.tracks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_RADARTRACKS_H
