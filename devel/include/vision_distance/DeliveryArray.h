// Generated by gencpp from file vision_distance/DeliveryArray.msg
// DO NOT EDIT!


#ifndef VISION_DISTANCE_MESSAGE_DELIVERYARRAY_H
#define VISION_DISTANCE_MESSAGE_DELIVERYARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_distance/Delivery.h>

namespace vision_distance
{
template <class ContainerAllocator>
struct DeliveryArray_
{
  typedef DeliveryArray_<ContainerAllocator> Type;

  DeliveryArray_()
    : visions()  {
    }
  DeliveryArray_(const ContainerAllocator& _alloc)
    : visions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::vision_distance::Delivery_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::vision_distance::Delivery_<ContainerAllocator> >> _visions_type;
  _visions_type visions;





  typedef boost::shared_ptr< ::vision_distance::DeliveryArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_distance::DeliveryArray_<ContainerAllocator> const> ConstPtr;

}; // struct DeliveryArray_

typedef ::vision_distance::DeliveryArray_<std::allocator<void> > DeliveryArray;

typedef boost::shared_ptr< ::vision_distance::DeliveryArray > DeliveryArrayPtr;
typedef boost::shared_ptr< ::vision_distance::DeliveryArray const> DeliveryArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_distance::DeliveryArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_distance::DeliveryArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_distance::DeliveryArray_<ContainerAllocator1> & lhs, const ::vision_distance::DeliveryArray_<ContainerAllocator2> & rhs)
{
  return lhs.visions == rhs.visions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_distance::DeliveryArray_<ContainerAllocator1> & lhs, const ::vision_distance::DeliveryArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_distance

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_distance::DeliveryArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_distance::DeliveryArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_distance::DeliveryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_distance::DeliveryArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_distance::DeliveryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_distance::DeliveryArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_distance::DeliveryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "feb4980b2e15e2383a554067acde5244";
  }

  static const char* value(const ::vision_distance::DeliveryArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfeb4980b2e15e238ULL;
  static const uint64_t static_value2 = 0x3a554067acde5244ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_distance::DeliveryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_distance/DeliveryArray";
  }

  static const char* value(const ::vision_distance::DeliveryArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_distance::DeliveryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_distance/Delivery[] visions\n"
"\n"
"================================================================================\n"
"MSG: vision_distance/Delivery\n"
"int32 flag\n"
"float64 dist_x\n"
"float64 dist_y\n"
;
  }

  static const char* value(const ::vision_distance::DeliveryArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_distance::DeliveryArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.visions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeliveryArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_distance::DeliveryArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_distance::DeliveryArray_<ContainerAllocator>& v)
  {
    s << indent << "visions[]" << std::endl;
    for (size_t i = 0; i < v.visions.size(); ++i)
    {
      s << indent << "  visions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vision_distance::Delivery_<ContainerAllocator> >::stream(s, indent + "    ", v.visions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_DISTANCE_MESSAGE_DELIVERYARRAY_H
