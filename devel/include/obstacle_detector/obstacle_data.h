// Generated by gencpp from file obstacle_detector/obstacle_data.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECTOR_MESSAGE_OBSTACLE_DATA_H
#define OBSTACLE_DETECTOR_MESSAGE_OBSTACLE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace obstacle_detector
{
template <class ContainerAllocator>
struct obstacle_data_
{
  typedef obstacle_data_<ContainerAllocator> Type;

  obstacle_data_()
    : coordinate_x(0.0)
    , coordinate_y(0.0)
    , coordinate_z(0.0)
    , volume(0.0)
    , distance(0.0)  {
    }
  obstacle_data_(const ContainerAllocator& _alloc)
    : coordinate_x(0.0)
    , coordinate_y(0.0)
    , coordinate_z(0.0)
    , volume(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef double _coordinate_x_type;
  _coordinate_x_type coordinate_x;

   typedef double _coordinate_y_type;
  _coordinate_y_type coordinate_y;

   typedef double _coordinate_z_type;
  _coordinate_z_type coordinate_z;

   typedef double _volume_type;
  _volume_type volume;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::obstacle_detector::obstacle_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detector::obstacle_data_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_data_

typedef ::obstacle_detector::obstacle_data_<std::allocator<void> > obstacle_data;

typedef boost::shared_ptr< ::obstacle_detector::obstacle_data > obstacle_dataPtr;
typedef boost::shared_ptr< ::obstacle_detector::obstacle_data const> obstacle_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detector::obstacle_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detector::obstacle_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_detector::obstacle_data_<ContainerAllocator1> & lhs, const ::obstacle_detector::obstacle_data_<ContainerAllocator2> & rhs)
{
  return lhs.coordinate_x == rhs.coordinate_x &&
    lhs.coordinate_y == rhs.coordinate_y &&
    lhs.coordinate_z == rhs.coordinate_z &&
    lhs.volume == rhs.volume &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_detector::obstacle_data_<ContainerAllocator1> & lhs, const ::obstacle_detector::obstacle_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detector::obstacle_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detector::obstacle_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detector::obstacle_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55c5c0fa4c104cd9d5bf8f06e255b85f";
  }

  static const char* value(const ::obstacle_detector::obstacle_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55c5c0fa4c104cd9ULL;
  static const uint64_t static_value2 = 0xd5bf8f06e255b85fULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detector/obstacle_data";
  }

  static const char* value(const ::obstacle_detector::obstacle_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 coordinate_x\n"
"float64 coordinate_y\n"
"float64 coordinate_z\n"
"float64 volume\n"
"float64 distance\n"
;
  }

  static const char* value(const ::obstacle_detector::obstacle_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coordinate_x);
      stream.next(m.coordinate_y);
      stream.next(m.coordinate_z);
      stream.next(m.volume);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obstacle_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detector::obstacle_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detector::obstacle_data_<ContainerAllocator>& v)
  {
    s << indent << "coordinate_x: ";
    Printer<double>::stream(s, indent + "  ", v.coordinate_x);
    s << indent << "coordinate_y: ";
    Printer<double>::stream(s, indent + "  ", v.coordinate_y);
    s << indent << "coordinate_z: ";
    Printer<double>::stream(s, indent + "  ", v.coordinate_z);
    s << indent << "volume: ";
    Printer<double>::stream(s, indent + "  ", v.volume);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECTOR_MESSAGE_OBSTACLE_DATA_H
