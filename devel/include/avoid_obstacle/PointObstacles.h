// Generated by gencpp from file avoid_obstacle/PointObstacles.msg
// DO NOT EDIT!


#ifndef AVOID_OBSTACLE_MESSAGE_POINTOBSTACLES_H
#define AVOID_OBSTACLE_MESSAGE_POINTOBSTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace avoid_obstacle
{
template <class ContainerAllocator>
struct PointObstacles_
{
  typedef PointObstacles_<ContainerAllocator> Type;

  PointObstacles_()
    : x(0.0)
    , y(0.0)
    , radius(0.0)
    , true_radius(0.0)  {
    }
  PointObstacles_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , radius(0.0)
    , true_radius(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _true_radius_type;
  _true_radius_type true_radius;





  typedef boost::shared_ptr< ::avoid_obstacle::PointObstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::avoid_obstacle::PointObstacles_<ContainerAllocator> const> ConstPtr;

}; // struct PointObstacles_

typedef ::avoid_obstacle::PointObstacles_<std::allocator<void> > PointObstacles;

typedef boost::shared_ptr< ::avoid_obstacle::PointObstacles > PointObstaclesPtr;
typedef boost::shared_ptr< ::avoid_obstacle::PointObstacles const> PointObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::avoid_obstacle::PointObstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::avoid_obstacle::PointObstacles_<ContainerAllocator1> & lhs, const ::avoid_obstacle::PointObstacles_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.radius == rhs.radius &&
    lhs.true_radius == rhs.true_radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::avoid_obstacle::PointObstacles_<ContainerAllocator1> & lhs, const ::avoid_obstacle::PointObstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace avoid_obstacle

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::avoid_obstacle::PointObstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avoid_obstacle::PointObstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avoid_obstacle::PointObstacles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdfd5df64a7b05d16d4097ba2128a420";
  }

  static const char* value(const ::avoid_obstacle::PointObstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdfd5df64a7b05d1ULL;
  static const uint64_t static_value2 = 0x6d4097ba2128a420ULL;
};

template<class ContainerAllocator>
struct DataType< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "avoid_obstacle/PointObstacles";
  }

  static const char* value(const ::avoid_obstacle::PointObstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x                       # Central point X [m]\n"
"float64 y                       # Central point Y [m]\n"
"float64 radius                  # Radius with added margin [m]\n"
"float64 true_radius             # True measured radius [m]\n"
;
  }

  static const char* value(const ::avoid_obstacle::PointObstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.radius);
      stream.next(m.true_radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointObstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::avoid_obstacle::PointObstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::avoid_obstacle::PointObstacles_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "true_radius: ";
    Printer<double>::stream(s, indent + "  ", v.true_radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AVOID_OBSTACLE_MESSAGE_POINTOBSTACLES_H
