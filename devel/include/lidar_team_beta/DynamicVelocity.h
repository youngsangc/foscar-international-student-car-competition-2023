// Generated by gencpp from file lidar_team_beta/DynamicVelocity.msg
// DO NOT EDIT!


#ifndef LIDAR_TEAM_BETA_MESSAGE_DYNAMICVELOCITY_H
#define LIDAR_TEAM_BETA_MESSAGE_DYNAMICVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_team_beta
{
template <class ContainerAllocator>
struct DynamicVelocity_
{
  typedef DynamicVelocity_<ContainerAllocator> Type;

  DynamicVelocity_()
    : throttle(0.0)
    , steering(0.0)  {
    }
  DynamicVelocity_(const ContainerAllocator& _alloc)
    : throttle(0.0)
    , steering(0.0)  {
  (void)_alloc;
    }



   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _steering_type;
  _steering_type steering;





  typedef boost::shared_ptr< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct DynamicVelocity_

typedef ::lidar_team_beta::DynamicVelocity_<std::allocator<void> > DynamicVelocity;

typedef boost::shared_ptr< ::lidar_team_beta::DynamicVelocity > DynamicVelocityPtr;
typedef boost::shared_ptr< ::lidar_team_beta::DynamicVelocity const> DynamicVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator1> & lhs, const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.throttle == rhs.throttle &&
    lhs.steering == rhs.steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator1> & lhs, const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_team_beta

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39f463d271c2ca10c14182802c72c029";
  }

  static const char* value(const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39f463d271c2ca10ULL;
  static const uint64_t static_value2 = 0xc14182802c72c029ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_team_beta/DynamicVelocity";
  }

  static const char* value(const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 throttle\n"
"float64 steering\n"
;
  }

  static const char* value(const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.throttle);
      stream.next(m.steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamicVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_team_beta::DynamicVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_team_beta::DynamicVelocity_<ContainerAllocator>& v)
  {
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_TEAM_BETA_MESSAGE_DYNAMICVELOCITY_H
