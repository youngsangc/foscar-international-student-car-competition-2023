// Generated by gencpp from file cam_lidar_calibration/OptimiseResponse.msg
// DO NOT EDIT!


#ifndef CAM_LIDAR_CALIBRATION_MESSAGE_OPTIMISERESPONSE_H
#define CAM_LIDAR_CALIBRATION_MESSAGE_OPTIMISERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cam_lidar_calibration
{
template <class ContainerAllocator>
struct OptimiseResponse_
{
  typedef OptimiseResponse_<ContainerAllocator> Type;

  OptimiseResponse_()
    : samples(0)  {
    }
  OptimiseResponse_(const ContainerAllocator& _alloc)
    : samples(0)  {
  (void)_alloc;
    }



   typedef uint8_t _samples_type;
  _samples_type samples;





  typedef boost::shared_ptr< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OptimiseResponse_

typedef ::cam_lidar_calibration::OptimiseResponse_<std::allocator<void> > OptimiseResponse;

typedef boost::shared_ptr< ::cam_lidar_calibration::OptimiseResponse > OptimiseResponsePtr;
typedef boost::shared_ptr< ::cam_lidar_calibration::OptimiseResponse const> OptimiseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator1> & lhs, const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.samples == rhs.samples;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator1> & lhs, const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cam_lidar_calibration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f73727291f76ef81a996e00ff082aa18";
  }

  static const char* value(const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf73727291f76ef81ULL;
  static const uint64_t static_value2 = 0xa996e00ff082aa18ULL;
};

template<class ContainerAllocator>
struct DataType< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cam_lidar_calibration/OptimiseResponse";
  }

  static const char* value(const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 samples\n"
"\n"
;
  }

  static const char* value(const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.samples);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimiseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cam_lidar_calibration::OptimiseResponse_<ContainerAllocator>& v)
  {
    s << indent << "samples: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.samples);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAM_LIDAR_CALIBRATION_MESSAGE_OPTIMISERESPONSE_H
