// Generated by gencpp from file cam_lidar_calibration/RunOptimiseResult.msg
// DO NOT EDIT!


#ifndef CAM_LIDAR_CALIBRATION_MESSAGE_RUNOPTIMISERESULT_H
#define CAM_LIDAR_CALIBRATION_MESSAGE_RUNOPTIMISERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace cam_lidar_calibration
{
template <class ContainerAllocator>
struct RunOptimiseResult_
{
  typedef RunOptimiseResult_<ContainerAllocator> Type;

  RunOptimiseResult_()
    : transform()  {
    }
  RunOptimiseResult_(const ContainerAllocator& _alloc)
    : transform(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;





  typedef boost::shared_ptr< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> const> ConstPtr;

}; // struct RunOptimiseResult_

typedef ::cam_lidar_calibration::RunOptimiseResult_<std::allocator<void> > RunOptimiseResult;

typedef boost::shared_ptr< ::cam_lidar_calibration::RunOptimiseResult > RunOptimiseResultPtr;
typedef boost::shared_ptr< ::cam_lidar_calibration::RunOptimiseResult const> RunOptimiseResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator1> & lhs, const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator2> & rhs)
{
  return lhs.transform == rhs.transform;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator1> & lhs, const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cam_lidar_calibration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2d1de03cf5b052350d875b7cfbc84a5";
  }

  static const char* value(const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2d1de03cf5b0523ULL;
  static const uint64_t static_value2 = 0x50d875b7cfbc84a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cam_lidar_calibration/RunOptimiseResult";
  }

  static const char* value(const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result\n"
"geometry_msgs/Transform transform\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunOptimiseResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cam_lidar_calibration::RunOptimiseResult_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAM_LIDAR_CALIBRATION_MESSAGE_RUNOPTIMISERESULT_H
